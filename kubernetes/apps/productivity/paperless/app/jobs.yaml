apiVersion: batch/v1
kind: CronJob
metadata:
  name: paperless-cronjob-fix-ownership
spec:
  schedule: "*/15 * * * *" # Every 15 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          containers:
            - name: paperless-fix-ownership
              image: alpine/curl:8.12.1
              envFrom:
                - secretRef:
                    name: paperless-secret
              command:
                - sh
                - -c
                - |

                  echo "üîç Installing jq..."
                  apk add --no-cache jq > /dev/null 2>&1

                  echo "üîç Starting Paperless bulk permissions fix..."
                  PAPERLESS_URL="http://paperless-paperless-ngx.productivity.svc.cluster.local"
                  OWNER_ID="4"  # User ID for assignment
                  GROUP_ID="1"  # Group ID for assignment
                  AUTH_HEADER="Authorization: Token $PAPERLESS_API_TOKEN"

                  # Function to update permissions using PATCH requests instead of bulk API
                  update_permissions_individually() {
                      ITEM_TYPE=$1  # Either "tags", "correspondents", or "document_types"
                      echo "üîç Checking for new $ITEM_TYPE..."

                      # Fetch all items that are not yet assigned to the group
                      ITEM_IDS=$(curl -s -H "$AUTH_HEADER" -H "Content-Type: application/json" "$PAPERLESS_URL/api/$ITEM_TYPE/" | jq -r '.results[] | select(.ownership != "group") | .id')

                      if [ -z "$ITEM_IDS" ]; then
                          echo "‚úÖ No new $ITEM_TYPE found, exiting."
                          return
                      fi

                      for ITEM_ID in $ITEM_IDS; do
                          echo "üîÑ Updating permissions for $ITEM_TYPE ID $ITEM_ID..."

                          JSON_PAYLOAD=$(cat <<EOF
                  {
                    "owner": $OWNER_ID,
                    "set_permissions": {
                      "view": { "users": [], "groups": ["$GROUP_ID"] },
                      "change": { "users": [], "groups": ["$GROUP_ID"] }
                    }
                  }
                  EOF
                  )

                          echo "üìù JSON Payload for $ITEM_TYPE ID $ITEM_ID:"
                          echo "$JSON_PAYLOAD" | jq .  # Pretty print JSON

                          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PATCH -H "$AUTH_HEADER" -H "Content-Type: application/json" \
                            "$PAPERLESS_URL/api/$ITEM_TYPE/$ITEM_ID/" -d "$JSON_PAYLOAD")

                          echo "üìú API Response for $ITEM_TYPE ID $ITEM_ID:"
                          cat response.json | jq .  # Pretty print API response

                          if [ "$RESPONSE" -ne 200 ]; then
                              echo "‚ùå Error updating $ITEM_TYPE ID $ITEM_ID! HTTP Status: $RESPONSE"
                          else
                              echo "‚úÖ Successfully updated permissions for $ITEM_TYPE ID $ITEM_ID"
                          fi
                      done

                      echo "‚úÖ Permissions updated successfully for all $ITEM_TYPE!"
                  }

                  # Fix permissions for tags, correspondents, and document types
                  update_permissions_individually "tags"
                  update_permissions_individually "correspondents"
                  update_permissions_individually "document_types"

                  echo "‚úÖ Paperless permissions fix completed!"
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: paperless-cronjob-medical-invoice-check
spec:
  schedule: "0 6 * * 0" # Every Sunday at 06:00 AM
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          containers:
            - name: paperless-medical-invoice-check
              image: alpine/curl:8.12.1
              envFrom:
                - secretRef:
                    name: paperless-secret
              command:
                - sh
                - -c
                - |
                  echo "üîç Starting Paperless invoice email automation..."
                  PAPERLESS_URL="http://paperless-paperless-ngx.productivity.svc.cluster.local"
                  API_TOKEN="$PAPERLESS_API_TOKEN"
                  EMAIL_TO="mail@${SECRET_DOMAIN}"
                  SMTP_SERVER="${SECRET_MAIL_SERVER}"
                  SMTP_PORT="25"

                  # Install required packages if missing
                  echo "üîç Checking required dependencies..."

                  # Function to check and install packages
                  install_package() {
                      PACKAGE=$1
                      APK_PACKAGE=$2
                      BIN_PATH=$3

                      if ! command -v "$PACKAGE" > /dev/null 2>&1 && [ ! -f "$BIN_PATH" ]; then
                          echo "‚ö†Ô∏è $PACKAGE is missing. Installing..."
                          apk add --no-cache "$APK_PACKAGE" || (echo "‚ùå Failed to install $PACKAGE. Retrying..." && apk add --no-cache "$APK_PACKAGE")

                          # If it's pdfunite, reload the environment in case the binary is missing
                          if [ "$PACKAGE" = "pdfunite" ]; then
                              export PATH=$PATH:/usr/bin
                          fi
                      else
                          echo "‚úÖ $PACKAGE is already installed."
                      fi
                  }

                  # Install required dependencies
                  install_package "jq" "jq" "/usr/bin/jq"
                  install_package "pdfunite" "poppler-utils" "/usr/bin/pdfunite"
                  install_package "mailx" "mailx" "/usr/bin/mailx"

                  # Final verification
                  echo "üîç Verifying installations..."
                  command -v jq && command -v pdfunite && command -v mailx && echo "‚úÖ All dependencies installed successfully!"

                  # Get today's date
                  TODAY=$(date -I)
                  LAST_WEEK=$(date -I -d "@$(($(date +%s) - 7 * 86400))")

                  # Get current month and year
                  CUR_YEAR=$(date +%Y)
                  CUR_MONTH=$(date +%m)

                  # Determine previous month
                  if [ "$CUR_MONTH" -eq 1 ]; then
                      LAST_MONTH=12
                      LAST_YEAR=$((CUR_YEAR - 1))
                  else
                      LAST_MONTH=$((CUR_MONTH - 1))
                      LAST_YEAR=$CUR_YEAR
                  fi

                  # üõ† Fix: Manually determine last day of the previous month (BusyBox doesn't support `date -d` calculation)
                  case "$LAST_MONTH" in
                      1|3|5|7|8|10|12) LAST_DAY=31 ;;
                      4|6|9|11) LAST_DAY=30 ;;
                      2)
                          if [ $((LAST_YEAR % 4)) -eq 0 ] && { [ $((LAST_YEAR % 100)) -ne 0 ] || [ $((LAST_YEAR % 400)) -eq 0 ]; }; then
                              LAST_DAY=29
                          else
                              LAST_DAY=28
                          fi
                          ;;
                  esac

                  FIRST_DAY_LAST_MONTH=$(printf "%04d-%02d-01" "$LAST_YEAR" "$LAST_MONTH")
                  LAST_DAY_LAST_MONTH=$(printf "%04d-%02d-%02d" "$LAST_YEAR" "$LAST_MONTH" "$LAST_DAY")

                  echo "üìÖ Today: $TODAY | Last Week: $LAST_WEEK"
                  echo "üìÖ Last Month: $FIRST_DAY_LAST_MONTH to $LAST_DAY_LAST_MONTH"

                  # Function to generate a merged PDF for a given time range
                  generate_merged_pdf() {
                      TIME_RANGE="$1"
                      START_DATE="$2"
                      PDF_FILE="/tmp/invoices_$TIME_RANGE.pdf"

                      echo "üîÑ Fetching invoices from $TIME_RANGE..."
                      API_URL="$PAPERLESS_URL/api/documents/?tags__name__in=Rechnung,Gesundheit&document_date__gte=$START_DATE"

                      echo "üìù API Request:"
                      echo "    URL: $API_URL"

                      INVOICES=$(curl -s -H "Authorization: Token $API_TOKEN" "$API_URL")
                      echo "üìú Raw API Response:"
                      echo "$INVOICES"

                      echo "üìú API Response:"
                      echo "$INVOICES" | jq '.'

                      echo "üìå Debug: Checking document count..."
                      echo "$INVOICES" | jq '.results'

                      # Check if the response contains documents
                      DOC_COUNT=$(echo "$INVOICES" | jq '.results | length')

                      if [ "$DOC_COUNT" -eq 0 ]; then
                          echo "‚ö†Ô∏è No invoices found for $TIME_RANGE. Skipping PDF creation."
                          return
                      fi

                      PDF_LIST=""
                      DOC_IDS=""
                      for DOC_ID in $(echo "$INVOICES" | jq -r '.results[].id'); do
                          if [[ ! "$DOC_ID" =~ ^[0-9]+$ ]]; then
                              echo "‚ö†Ô∏è Skipping invalid document ID: $DOC_ID"
                              continue
                          fi

                          FILE_URL="$PAPERLESS_URL/api/documents/$DOC_ID/download/"
                          PDF_TMP="/tmp/invoice_$DOC_ID.pdf"

                          echo "üì• Downloading Invoice ID $DOC_ID..."
                          curl -s -H "Authorization: Token $API_TOKEN" -o "$PDF_TMP" "$FILE_URL"

                          if [ -f "$PDF_TMP" ]; then
                              PDF_LIST="$PDF_LIST $PDF_TMP"
                              DOC_IDS="$DOC_IDS $DOC_ID"
                          else
                              echo "‚ö†Ô∏è Failed to download invoice ID $DOC_ID"
                          fi
                      done

                      if [ -n "$PDF_LIST" ]; then
                          pdfunite $PDF_LIST "$PDF_FILE" && echo "‚úÖ Merged PDF created: $PDF_FILE"
                      else
                          echo "‚ö†Ô∏è No valid invoices found to merge. Skipping PDF creation."
                          return
                      fi

                      echo "$PDF_FILE $DOC_IDS"
                  }

                  # 1Ô∏è‚É£ Generate weekly PDF for invoices to be paid
                  WEEKLY_RESULT=$(generate_merged_pdf "week" "$LAST_WEEK" "$TODAY")
                  PDF_FILE_WEEKLY=$(echo "$WEEKLY_RESULT" | awk '{print $1}')
                  WEEKLY_DOC_IDS=$(echo "$WEEKLY_RESULT" | awk '{$1=""; print $0}')

                  if [ -f "$PDF_FILE_WEEKLY" ]; then
                      echo "üìß Sending weekly invoice report..."
                      echo "Attached is the PDF containing all invoices from the past 7 days for payment." | mailx -a "$PDF_FILE_WEEKLY" -s "Weekly Invoice Report - $TODAY" -S smtp="smtp://$SMTP_SERVER:$SMTP_PORT" -r "noreply@$SECRET_DOMAIN" "$EMAIL_TO"
                      rm "$PDF_FILE_WEEKLY" $PDF_LIST
                  else
                      echo "‚ö†Ô∏è No invoices found for the past week. Skipping weekly email."
                  fi

                  # 2Ô∏è‚É£ Generate monthly PDF for Beihilfe/PKV
                  MONTHLY_RESULT=$(generate_merged_pdf "month" "$FIRST_DAY_LAST_MONTH" "$LAST_DAY_LAST_MONTH")
                  PDF_FILE_MONTHLY=$(echo "$MONTHLY_RESULT" | awk '{print $1}')
                  MONTHLY_DOC_IDS=$(echo "$MONTHLY_RESULT" | awk '{$1=""; print $0}')

                  if [ -f "$PDF_FILE_MONTHLY" ]; then
                      echo "üìß Sending monthly invoice summary..."
                      echo "Attached is the PDF containing all invoices from the past month for Beihilfe/PKV submission." | mailx -a "$PDF_FILE_MONTHLY" -s "Monthly Invoice Summary - $LAST_MONTH" -S smtp="smtp://$SMTP_SERVER:$SMTP_PORT" -r "noreply@$SECRET_DOMAIN" "$EMAIL_TO"
                      rm "$PDF_FILE_MONTHLY" $PDF_LIST
                  else
                      echo "‚ö†Ô∏è No invoices found for the past month. Skipping monthly email."
                  fi

                  echo "‚úÖ Process completed!"
          restartPolicy: OnFailure
