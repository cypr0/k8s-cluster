apiVersion: batch/v1
kind: CronJob
metadata:
  name: paperless-cronjob-fix-ownership
spec:
  schedule: "*/15 * * * *" # Every 15 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          containers:
            - name: paperless-fix-ownership
              image: alpine/curl:8.12.1
              envFrom:
                - secretRef:
                    name: paperless-secret
              command:
                - sh
                - -c
                - |
                  echo "üîç Installing jq..."
                  apk add --no-cache jq > /dev/null 2>&1

                  echo "üîç Starting Paperless bulk permissions fix..."
                  PAPERLESS_URL="http://paperless-paperless-ngx.productivity.svc.cluster.local"
                  GROUP_ID=3  # Group ID for assignment
                  AUTH_HEADER="Authorization: Token $PAPERLESS_API_TOKEN"

                  # Function to update permissions for individual tags
                  update_tag_permissions() {
                      echo "üîç Checking for new tags..."

                      # Fetch all tags that are not yet assigned to the group
                      TAG_IDS=$(curl -s -H "$AUTH_HEADER" -H "Content-Type: application/json" "$PAPERLESS_URL/api/tags/" | jq -r '.results[] | select(.ownership != "group") | .id')

                      if [ -z "$TAG_IDS" ]; then
                          echo "‚úÖ No new tags found, exiting."
                          return
                      fi

                      # Process each tag separately
                      for TAG_ID in $TAG_IDS; do
                          echo "üîÑ Updating permissions for tag ID $TAG_ID..."

                          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PATCH -H "$AUTH_HEADER" -H "Content-Type: application/json" \
                            "$PAPERLESS_URL/api/tags/$TAG_ID/" -d "{
                              \"set_permissions\": {
                                  \"view\": { \"groups\": [$GROUP_ID] },
                                  \"change\": { \"groups\": [$GROUP_ID] }
                              }
                            }")

                          echo "üìú API Response for tag ID $TAG_ID:"
                          cat response.json

                          if [ "$RESPONSE" -ne 200 ]; then
                              echo "‚ùå Error updating tag ID $TAG_ID! HTTP Status: $RESPONSE"
                          else
                              echo "‚úÖ Successfully updated tag ID $TAG_ID"
                          fi
                      done

                      echo "‚úÖ Tags permissions updated successfully!"
                  }

                  # Only updating tags since correspondents are causing 500 errors
                  update_tag_permissions

                  echo "‚úÖ Paperless tag permissions fix completed!"
          restartPolicy: OnFailure
