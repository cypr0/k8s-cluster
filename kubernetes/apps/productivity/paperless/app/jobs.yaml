apiVersion: batch/v1
kind: CronJob
metadata:
  name: paperless-cronjob-fix-ownership
spec:
  schedule: "*/15 * * * *" # Every 15 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          containers:
            - name: paperless-fix-ownership
              image: alpine/curl:8.12.1
              envFrom:
                - secretRef:
                    name: paperless-secret
              command:
                - sh
                - -c
                - |

                  echo "üîç Installing jq..."
                  apk add --no-cache jq > /dev/null 2>&1

                  echo "üîç Starting Paperless bulk permissions fix..."
                  PAPERLESS_URL="http://paperless-paperless-ngx.productivity.svc.cluster.local"
                  OWNER_ID="4"  # User ID for assignment
                  GROUP_ID="1"  # Group ID for assignment
                  AUTH_HEADER="Authorization: Token $PAPERLESS_API_TOKEN"

                  # Function to update permissions using PATCH requests instead of bulk API
                  update_permissions_individually() {
                      ITEM_TYPE=$1  # Either "tags", "correspondents", or "document_types"
                      echo "üîç Checking for new $ITEM_TYPE..."

                      # Fetch all items that are not yet assigned to the group
                      ITEM_IDS=$(curl -s -H "$AUTH_HEADER" -H "Content-Type: application/json" "$PAPERLESS_URL/api/$ITEM_TYPE/" | jq -r '.results[] | select(.ownership != "group") | .id')

                      if [ -z "$ITEM_IDS" ]; then
                          echo "‚úÖ No new $ITEM_TYPE found, exiting."
                          return
                      fi

                      for ITEM_ID in $ITEM_IDS; do
                          echo "üîÑ Updating permissions for $ITEM_TYPE ID $ITEM_ID..."

                          JSON_PAYLOAD=$(cat <<EOF
                  {
                    "owner": $OWNER_ID,
                    "set_permissions": {
                      "view": { "users": [], "groups": ["$GROUP_ID"] },
                      "change": { "users": [], "groups": ["$GROUP_ID"] }
                    }
                  }
                  EOF
                  )

                          echo "üìù JSON Payload for $ITEM_TYPE ID $ITEM_ID:"
                          echo "$JSON_PAYLOAD" | jq .  # Pretty print JSON

                          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PATCH -H "$AUTH_HEADER" -H "Content-Type: application/json" \
                            "$PAPERLESS_URL/api/$ITEM_TYPE/$ITEM_ID/" -d "$JSON_PAYLOAD")

                          echo "üìú API Response for $ITEM_TYPE ID $ITEM_ID:"
                          cat response.json | jq .  # Pretty print API response

                          if [ "$RESPONSE" -ne 200 ]; then
                              echo "‚ùå Error updating $ITEM_TYPE ID $ITEM_ID! HTTP Status: $RESPONSE"
                          else
                              echo "‚úÖ Successfully updated permissions for $ITEM_TYPE ID $ITEM_ID"
                          fi
                      done

                      echo "‚úÖ Permissions updated successfully for all $ITEM_TYPE!"
                  }

                  # Fix permissions for tags, correspondents, and document types
                  update_permissions_individually "tags"
                  update_permissions_individually "correspondents"
                  update_permissions_individually "document_types"

                  echo "‚úÖ Paperless permissions fix completed!"
          restartPolicy: OnFailure
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: paperless-cronjob-medical-invoice-check
spec:
  schedule: "*/15 * * * *" # Every 15 minutes
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 60
      template:
        spec:
          containers:
            - name: paperless-medical-invoice-check
              image: alpine/curl:8.12.1
              envFrom:
                - secretRef:
                    name: paperless-secret
              command:
                - sh
                - -c
                - |

                  echo "üîç Starting Paperless invoice email automation..."
                  PAPERLESS_URL="http://paperless-paperless-ngx.productivity.svc.cluster.local"
                  API_TOKEN="$PAPERLESS_API_TOKEN"
                  EMAIL_TO="mail@{SECRET_DOMAIN}"
                  SMTP_SERVER="${SECRET_MAIL_SERVER}"
                  SMTP_PORT="25"

                  # Install required packages if missing
                  if ! command -v pdfunite > /dev/null; then
                      echo "‚ö†Ô∏è pdfunite is missing. Installing poppler-utils..."
                      apk add --no-cache poppler-utils
                  fi

                  if ! command -v mailx > /dev/null; then
                      echo "‚ö†Ô∏è mailx is missing. Installing mailx..."
                      apk add --no-cache mailx
                  fi

                  if ! command -v jq > /dev/null; then
                      echo "‚ö†Ô∏è jq is missing. Installing jq..."
                      apk add --no-cache jq
                  fi

                  # Get today's date and calculate date ranges
                  TODAY=$(date -I)
                  LAST_WEEK=$(date -I -d "@$(($(date +%s) - 7 * 86400))")   # 7 days ago

                  # Get today's date and calculate date ranges
                  TODAY=$(date -I)
                  LAST_WEEK=$(date -I -d "@$(($(date +%s) - 7 * 86400))")   # 7 days ago

                  # Monthly calculation (Alpine-compatible)
                  LAST_MONTH_FIRST=$(date -I -d "@$(($(date +%s) - $(date +%d) * 86400))")  # First day of last month
                  LAST_MONTH_LAST=$(date -I -d "@$(($(date -d "$LAST_MONTH_FIRST +1 month" +%s) - 86400))")  # Last day of last month

                  echo "üìÖ Today: $TODAY | Last Week: $LAST_WEEK"
                  echo "üìÖ Last Month: $LAST_MONTH_FIRST to $LAST_MONTH_LAST"

                  # Function to add a tag to documents
                  add_tag_to_documents() {
                      TAG_NAME="$1"
                      DOCUMENT_IDS="$2"

                      if [ -z "$DOCUMENT_IDS" ]; then
                          echo "‚úÖ No documents to update with tag '$TAG_NAME'."
                          return
                      fi

                      for DOC_ID in $DOCUMENT_IDS; do
                          if [[ ! "$DOC_ID" =~ ^[0-9]+$ ]]; then
                              echo "‚ö†Ô∏è Skipping invalid document ID: $DOC_ID"
                              continue
                          fi

                          echo "üîÑ Adding tag '$TAG_NAME' to document ID $DOC_ID..."
                          RESPONSE=$(curl -s -X PATCH -H "Authorization: Token $API_TOKEN" -H "Content-Type: application/json" \
                              -H "X-CSRFToken: $API_TOKEN" \
                              "$PAPERLESS_URL/api/documents/$DOC_ID/" -d "{
                                  \"modify_tags\": {\"add_tags\": [\"$TAG_NAME\"]}
                              }")

                          if echo "$RESPONSE" | grep -q "403 Forbidden"; then
                              echo "‚ùå CSRF error while updating document ID $DOC_ID. Check API permissions."
                          elif echo "$RESPONSE" | grep -q "Not found"; then
                              echo "‚ùå Document ID $DOC_ID not found. Skipping."
                          fi
                      done

                      echo "‚úÖ Documents successfully updated with tag '$TAG_NAME'."
                  }

                  # Function to generate a merged PDF for a given time range
                  generate_merged_pdf() {
                      TIME_RANGE="$1"
                      START_DATE="$2"
                      PDF_FILE="/tmp/invoices_$TIME_RANGE.pdf"

                      echo "üîÑ Fetching invoices from $TIME_RANGE..."
                      INVOICES=$(curl -s -H "Authorization: Token $API_TOKEN" -H "Content-Type: application/json" \
                        "$PAPERLESS_URL/api/documents/?tags__name__in=Rechnung,Gesundheit&document_date__gte=$START_DATE")

                      PDF_LIST=""
                      DOC_IDS=""
                      for DOC_ID in $(echo "$INVOICES" | jq -r '.results[].id'); do
                          if [[ ! "$DOC_ID" =~ ^[0-9]+$ ]]; then
                              echo "‚ö†Ô∏è Skipping invalid document ID: $DOC_ID"
                              continue
                          fi

                          FILE_URL="$PAPERLESS_URL/api/documents/$DOC_ID/download/"
                          PDF_TMP="/tmp/invoice_$DOC_ID.pdf"

                          echo "üì• Downloading Invoice ID $DOC_ID..."
                          curl -s -H "Authorization: Token $API_TOKEN" -o "$PDF_TMP" "$FILE_URL"

                          if [ -f "$PDF_TMP" ]; then
                              PDF_LIST="$PDF_LIST $PDF_TMP"
                              DOC_IDS="$DOC_IDS $DOC_ID"
                          else
                              echo "‚ö†Ô∏è Failed to download invoice ID $DOC_ID"
                          fi
                      done

                      if [ -n "$PDF_LIST" ]; then
                          pdfunite $PDF_LIST "$PDF_FILE" && echo "‚úÖ Merged PDF created: $PDF_FILE"
                      else
                          echo "‚ö†Ô∏è No valid invoices found to merge. Skipping PDF creation."
                          return
                      fi

                      echo "$PDF_FILE $DOC_IDS"
                  }

                  # 1Ô∏è‚É£ Generate weekly PDF for invoices to be paid
                  WEEKLY_RESULT=$(generate_merged_pdf "week" "$LAST_WEEK")
                  PDF_FILE_WEEKLY=$(echo "$WEEKLY_RESULT" | awk '{print $1}')
                  WEEKLY_DOC_IDS=$(echo "$WEEKLY_RESULT" | awk '{$1=""; print $0}')

                  # Send weekly email with PDF
                  if [ -f "$PDF_FILE_WEEKLY" ]; then
                      echo "üìß Sending weekly invoice report..."
                      echo "Attached is the PDF containing all invoices from the past 7 days for payment." | mailx -a "$PDF_FILE_WEEKLY" -s "Weekly Invoice Report - $TODAY" -S smtp="smtp://$SMTP_SERVER:$SMTP_PORT" -r "noreply@{SECRET_DOMAIN}" "$EMAIL_TO"

                      # Tag documents as "Bezahlt"
                      add_tag_to_documents "Bezahlt" "$WEEKLY_DOC_IDS"

                      rm "$PDF_FILE_WEEKLY" $PDF_LIST  # Cleanup
                  else
                      echo "‚ö†Ô∏è No invoices found for the past week. Skipping weekly email."
                  fi

                  # 2Ô∏è‚É£ Generate monthly PDF for Beihilfe/PKV
                  MONTHLY_RESULT=$(generate_merged_pdf "month" "$LAST_MONTH")
                  PDF_FILE_MONTHLY=$(echo "$MONTHLY_RESULT" | awk '{print $1}')
                  MONTHLY_DOC_IDS=$(echo "$MONTHLY_RESULT" | awk '{$1=""; print $0}')

                  # Send monthly email with PDF
                  if [ -f "$PDF_FILE_MONTHLY" ]; then
                      echo "üìß Sending monthly invoice summary..."
                      echo "Attached is the PDF containing all invoices from the past month for Beihilfe/PKV submission." | mailx -a "$PDF_FILE_MONTHLY" -s "Monthly Invoice Summary - $LAST_MONTH" -S smtp="smtp://$SMTP_SERVER:$SMTP_PORT" -r "noreply@{SECRET_DOMAIN}" "$EMAIL_TO"

                      # Tag documents as "Eingereicht"
                      add_tag_to_documents "Eingereicht" "$MONTHLY_DOC_IDS"

                      rm "$PDF_FILE_MONTHLY" $PDF_LIST  # Cleanup
                  else
                      echo "‚ö†Ô∏è No invoices found for the past month. Skipping monthly email."
                  fi

                  echo "‚úÖ All reports sent via email successfully!"
          restartPolicy: OnFailure
